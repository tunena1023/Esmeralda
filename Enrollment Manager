function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('Enrollment Manager')
    .addItem('Setup Dashboard', 'setupDashboard')
    .addItem('Check Permissions', 'checkAllPermissions')
    .addToUi();
}

// Complete dynamic mapping system per school with all required columns
const SCHOOL_CONFIG = {
  'Christ The King': {
    sheetId: '12PPWS3SwgqVrbEXiCQwkJNfTCvQ8Ot_85zU4j6S-OCc',
    dataSheet: 'CTK_Data',
    columns: {
        status: 0,           // Col A
        dateAccepted: 1,     // Col B  
        dateProcessed: 2,    // Col C
        email: 4,            // Col E (Email Address)
        contact2: 5,         // Col F
        isNew: 5,            // Col F (Are you a current or new family?)
        parentFirst: 7,      // Col H 
        parentLast: 8,       // Col I 
        parentPhone: 10,     // Col K 
        address: {
          street: 17,        // Col R
          city: 18,          // Col S
          state: 19,         // Col T
          zip: 20            // Col U
        },
        parish: 23,          // Col X
        studentFirst: 24,    // Col Y 
        studentMiddle: 25,   // Col Z 
        studentLast: 26,     // Col AA
        grade: 27,           // Col AB
        dateOfBirth: 28,     // Col AC 
        gender: 29,          // Col AD 
        religiousAffiliation: 30, // Col AE 
        familyType: 5        // Col F
      },
    acceptedStatuses: ['accepted', 'accept', 'approved', 'confirmed'],
    middleNameType: "initial",
    hasReligiousAffiliation: true
},
  
  'Holy Family': {
    sheetId: '1OCa90VhaO7Lzln6A16wzf1nDh_9ENL5fycN79mf4ftc',
    dataSheet: 'HF_Data',
    columns: {
      status: 0,
      dateAccepted: 1,
      dateProcessed: 2,
      email: 4,            
      contact2: 5,
      isNew: 5,            
      parentFirst: 7,      
      parentLast: 8,      
      parentPhone: 10,    
      address: {
        street: 17,
        city: 18,
        state: 19,
        zip: 20
      },
      parish: 23,
      studentFirst: 24,    
      studentMiddle: 25,   
      studentLast: 26,     
      grade: 27,           
      dateOfBirth: 28,     
      gender: 29,          
      religiousAffiliation: 30,
      familyType: 5
    },
    acceptedStatuses: ['accepted', 'accept', 'approved', 'confirmed'],
    middleNameType: "initial",
    hasReligiousAffiliation: true  
  },
  'Holy Trinity': {
    sheetId: '1hpsbNQr9Sx3tMZQhhEX25ntet8Yv5IMVx1-6VNDgmwY',
    dataSheet: 'HT_Data',
    columns: {
        status: 0,
        dateAccepted: 1,
        dateProcessed: 2,
        email: 4,           
        contact2: 5,
        isNew: 5,            
        parentFirst: 7,      
        parentLast: 8,       
        parentPhone: 10,     
        address: {
          street: 17,
          city: 18,
          state: 19,
          zip: 20
        },
        parish: 23,
        studentFirst: 24,  
        studentMiddle: 25,
        studentLast: 26,
        grade: 27,           
        dateOfBirth: 28,
        gender: 29,
        religiousAffiliation: 30,
        familyType: 5
    },
    acceptedStatuses: ['accepted', 'accept', 'approved', 'confirmed'],
    middleNameType: "name",
    hasReligiousAffiliation: true
  },
  'St. Joseph': {
    sheetId: '19IV19n6BgoqGsbn800_xeucOZuwPG4PGRyPO7kZNShg',
    dataSheet: 'SJ_Data',
    columns: {
        status: 0,
        dateAccepted: 1,
        dateProcessed: 2,
        email: 4,
        contact2: 5,
        isNew: 5,
        parentFirst: 7,
        parentLast: 8,
        parentPhone: 10,
        address: {
          street: 17,
          city: 18,
          state: 19,
          zip: 20
        },
        parish: 23,
        studentFirst: 24, 
        studentMiddle: 25,
        studentLast: 26,
        grade: 27,
        dateOfBirth: 28,
        gender: 29,
        familyType: 5
      // Note: St. Joseph doesn't have Religious Affiliation column
    },
    acceptedStatuses: ['accepted', 'accept', 'approved', 'confirmed'],
    middleNameType: "name",
    hasReligiousAffiliation: false
  }
};

function showLastEnrollments(schoolName) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const enrollmentManagerSheet = ss.getSheetByName('Enrollment Manager');
  
  if (!enrollmentManagerSheet) {
    logAction('Error: Enrollment Manager sheet not found');
    return;
  }
  
  // Only clear the range A10:H25 when changing schools or refreshing all students
  // Not when selecting a student from B5
  const isRefreshingAll = schoolName && schoolName !== enrollmentManagerSheet.getRange('B3').getValue();
  
  if (isRefreshingAll) {
    // Clear range only if we're changing schools or refreshing all
    const clearRange = enrollmentManagerSheet.getRange('A10:H25');
    clearRange.clearContent();
  }
  
  if (!schoolName || !SCHOOL_CONFIG[schoolName]) {
    logAction('Error: Invalid school selected');
    return;
  }
  
  const config = SCHOOL_CONFIG[schoolName];
  const schoolSheet = ss.getSheetByName(config.dataSheet);
  if (!schoolSheet) {
    logAction(`Error: School sheet ${config.dataSheet} not found`);
    return;
  }
  
  const lastRow = schoolSheet.getLastRow();
  
  if (lastRow < 2) {
    logAction('Error: No data found in school sheet');
    return;
  }
  
  // Get data using dynamic mapping
  const data = schoolSheet.getRange(2, 1, lastRow - 1, schoolSheet.getLastColumn()).getValues();
  const acceptedStudents = [];
  
  data.forEach(row => {
    // Add validation for array access
    if (row.length <= config.columns.status) return;
    
    const status = row[config.columns.status] ? (row[config.columns.status] + '').toLowerCase() : '';
    
    // Validate array indices before access
    const dateAccepted = row.length > config.columns.dateAccepted ? row[config.columns.dateAccepted] : '';
    const studentFirst = row.length > config.columns.studentFirst ? (row[config.columns.studentFirst] || '') : '';
    const studentLast = row.length > config.columns.studentLast ? (row[config.columns.studentLast] || '') : '';
    const fullName = `${studentFirst} ${studentLast}`.trim();
    const grade = row.length > config.columns.grade ? (row[config.columns.grade] || '') : '';
    const dateProcessed = row.length > config.columns.dateProcessed ? row[config.columns.dateProcessed] : '';
    const parentFirst = row.length > config.columns.parentFirst ? (row[config.columns.parentFirst] || '') : '';
    const parentLast = row.length > config.columns.parentLast ? (row[config.columns.parentLast] || '') : '';
    const parentName = `${parentFirst} ${parentLast}`.trim();
    const parentPhone = row.length > config.columns.parentPhone ? (row[config.columns.parentPhone] || '') : '';
    const email = row.length > config.columns.email ? (row[config.columns.email] || '') : '';
    
    // Check if the student is accepted based on configured accepted statuses
    if (config.acceptedStatuses.includes(status) && dateAccepted && fullName) {
      acceptedStudents.push({
        studentName: fullName,
        grade: grade,
        dateAccepted: dateAccepted,
        dateProcessed: dateProcessed || '',
        parentName: parentName,
        parentPhone: parentPhone,
        email: email
      });
    }
  });
  
  // Sort by acceptance date (newest first)
  acceptedStudents.sort((a, b) => {
    // Add validation for date objects
    const dateA = a.dateAccepted instanceof Date ? a.dateAccepted : new Date(a.dateAccepted || 0);
    const dateB = b.dateAccepted instanceof Date ? b.dateAccepted : new Date(b.dateAccepted || 0);
    return dateB - dateA;
  });
  
  // Show ALL accepted students (not just 16)
  // But limit initial display to 16 rows (A10:H25)
  const displayCount = Math.min(acceptedStudents.length, 16);
  
  for (let i = 0; i < displayCount; i++) {
    const student = acceptedStudents[i];
    const row = 10 + i;
    
    enrollmentManagerSheet.getRange(row, 1).setValue(student.studentName);
    enrollmentManagerSheet.getRange(row, 2).setValue(student.grade);
    enrollmentManagerSheet.getRange(row, 3).setValue(student.dateAccepted);
    enrollmentManagerSheet.getRange(row, 4).setValue(student.dateProcessed);
    enrollmentManagerSheet.getRange(row, 5).setValue(student.parentName);
    enrollmentManagerSheet.getRange(row, 6).setValue(student.parentPhone);
    enrollmentManagerSheet.getRange(row, 7).setValue(student.email);
  }
  
  // Implement scroll bar if there are more than 16 students
    if (acceptedStudents.length > 16) {
    enrollmentManagerSheet.getRange('H3').setValue('▲ Previous')
      .setBackground('#6c757d')
      .setFontColor('white')
      .setHorizontalAlignment('center');
    
    enrollmentManagerSheet.getRange('H4').setValue('▼ Next')
      .setBackground('#6c757d')
      .setFontColor('white')
      .setHorizontalAlignment('center');
    
    enrollmentManagerSheet.getRange('A7:J7').merge();
    enrollmentManagerSheet.getRange('A7').setValue(`📋 ALL ACCEPTED STUDENTS (${acceptedStudents.length} total - Page 1)`)
      .setFontSize(14).setFontWeight('bold');
  } else {
    enrollmentManagerSheet.getRange('A7:J7').merge();
    enrollmentManagerSheet.getRange('A7').setValue(`📋 ACCEPTED STUDENTS (${acceptedStudents.length} total)`)
      .setFontSize(14).setFontWeight('bold');
  }
  
  logAction(`Showing ${acceptedStudents.length} accepted students for ${schoolName}`);
  return acceptedStudents.length;
}

// ENHANCED: Function to get schools alphabetically
function getSchoolsAlphabetically() {
  // Validate SCHOOL_CONFIG exists before using it
  if (!SCHOOL_CONFIG) {
    logAction('Error: SCHOOL_CONFIG not initialized');
    return [];
  }
  return Object.keys(SCHOOL_CONFIG).sort();
}

function setupDashboard() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  
  const sheets = ss.getSheets();
  const firstSheet = sheets[0];
  
  // Remove all sheets except the first one
  for (let i = sheets.length - 1; i > 0; i--) {
    ss.deleteSheet(sheets[i]);
  }
  
  firstSheet.setName('Enrollment Manager');
  const updatesSheet = ss.insertSheet('Enrollment Updates');
  const logsSheet = ss.insertSheet('Logs');

  // Create data sheets with IMPORTRANGE formulas
  const dataSheets = ['HT_Data', 'HF_Data', 'SJ_Data', 'CTK_Data'];
  const formulas = {
    'HT_Data': '=IMPORTRANGE("1hpsbNQr9Sx3tMZQhhEX25ntet8Yv5IMVx1-6VNDgmwY","Form Responses 1!A:FO")',
    'HF_Data': '=IMPORTRANGE("1OCa90VhaO7Lzln6A16wzf1nDh_9ENL5fycN79mf4ftc","Form Responses 1!A:FO")',
    'SJ_Data': '=IMPORTRANGE("19IV19n6BgoqGsbn800_xeucOZuwPG4PGRyPO7kZNShg","Form Responses 1!A:FO")',
    'CTK_Data': '=IMPORTRANGE("12PPWS3SwgqVrbEXiCQwkJNfTCvQ8Ot_85zU4j6S-OCc","Form Responses 1!A:FO")'
  };

  dataSheets.forEach(sheetName => {
    const dataSheet = ss.insertSheet(sheetName);
    dataSheet.getRange('A1').setFormula(formulas[sheetName]);
  });
  
  setupEnrollmentManagerTab(firstSheet);
  setupEnrollmentUpdatesTab(updatesSheet);
  setupLogsTab(logsSheet);
  
  SpreadsheetApp.getUi().alert('Dashboard setup completed successfully!');
}
  
function setupEnrollmentManagerTab(sheet) {
    sheet.clear();
    
    // Headers Student Details con azul suave (3 columnas)
    const studentHeaders = [
        'Student First Name:', 'Student Middle Name:', 'Student Last Name:', 
        'Grade:', 'Date of Birth:', 'Gender:', 'Religious Affiliation:', 'Student ID:'
    ];
    const contactHeaders = [
        'Parent First Name:', 'Parent Last Name:', 'Parent Phone:', 
        'Parent Email:', 'Contact #2:', 'Family Type:', 'Parish:', ''
    ];
    const addressHeaders = [
        'Street Address:', 'City:', 'State:', 'Zip Code:', '', '', '', ''
    ];

    // Fondo general
    sheet.getRange('A1:J45').setBackground('#f8f9fa');
    
    // === HEADER PRINCIPAL ===
    sheet.getRange('A1:J1').merge();
    sheet.getRange('A1').setValue('🎓 ENROLLMENT MANAGER')
        .setFontSize(18)
        .setFontWeight('bold')
        .setHorizontalAlignment('center')
        .setBackground('#1e3a8a')
        .setFontColor('white');
    
    // === CONTROLES SUPERIORES ===
    sheet.getRange('A3').setValue('School:');
    const schoolList = getSchoolsAlphabetically();
    sheet.getRange('B3').setValue(schoolList[0]);
    const validation = SpreadsheetApp.newDataValidation().requireValueInList(schoolList).build();
    sheet.getRange('B3').setDataValidation(validation);
    sheet.getRange('B3').setBackground('#e3f2fd');
    
    sheet.getRange('A5').setValue('Select Student:');
    sheet.getRange('B5').setValue('Loading students...');
    sheet.getRange('B5').setBackground('#fff3cd');
    
    // Contador de enrollments
    sheet.getRange('D4').setValue('New Enrollments:');
    sheet.getRange('D5').setValue('0');
    sheet.getRange('D5').setBackground('#e8f5e8').setHorizontalAlignment('right');
    
    // Botones
    sheet.getRange('F3:G3').merge();
    sheet.getRange('F3').setValue('🆕 CREATE NEW ENROLLMENT')
        .setBackground('#28a745')
        .setFontColor('white')
        .setHorizontalAlignment('center');
    
    sheet.getRange('I3:J3').merge();
    sheet.getRange('I3').setValue('📊 RUN REPORT')
        .setBackground('#007bff')
        .setFontColor('white')
        .setHorizontalAlignment('center');
    
    // === SECCIÓN NEW ENROLLMENTS ===
    sheet.getRange('A7:J7').merge();
    sheet.getRange('A7').setValue('📋 NEW ENROLLMENTS')
        .setFontSize(14)
        .setFontWeight('bold');
    
    // Headers New Enrollments con azul suave
    const newEnrollmentHeaders = ['Name', 'Grade', 'Date Accepted', 'Date Processed', 'Parent Name', 'Parent Phone', 'Email'];
    newEnrollmentHeaders.forEach((header, index) => {
        sheet.getRange(9, index + 1).setValue(header);
    });
    sheet.getRange('A9:G9')
        .setFontWeight('bold')
        .setBackground('#bfdbfe')
        .setHorizontalAlignment('center');
    
    // Área de datos con bordes negros y fondo blanco
    sheet.getRange('A10:H25')
        .setBackground('white')
        .setBorder(true, true, true, true, true, true, 'black', SpreadsheetApp.BorderStyle.SOLID);
    
    // Alternar colores de filas para información (gris suave intercalado)
    for (let i = 10; i <= 25; i++) {
        const rowColor = (i % 2 === 0) ? '#f8f9fa' : 'white';
        sheet.getRange(i, 1, 1, 7).setBackground(rowColor);
        // Alineación derecha para celdas de información
        sheet.getRange(i, 1, 1, 7).setHorizontalAlignment('right');
    }
    
    // === SECCIÓN STUDENT DETAILS ===
    sheet.getRange('A27').setValue('Student details')
        .setFontSize(14)
        .setFontWeight('bold');
    
    
    // Columna A - Student Info Headers
    studentHeaders.forEach((header, index) => {
        const row = 29 + index;
        sheet.getRange(row, 1).setValue(header)
            .setBackground('#bfdbfe')
            .setFontWeight('bold');
        // Información en columna B con gris intercalado
        const infoColor = (index % 2 === 0) ? '#f8f9fa' : 'white';
        sheet.getRange(row, 2).setBackground(infoColor).setHorizontalAlignment('right');
    });
    
    // Columna D - Contact Info Headers
    contactHeaders.forEach((header, index) => {
        const row = 29 + index;
        if (header) {
            sheet.getRange(row, 4).setValue(header)
                .setBackground('#bfdbfe')
                .setFontWeight('bold');
            // Información en columna E con gris intercalado
            const infoColor = (index % 2 === 0) ? '#f8f9fa' : 'white';
            sheet.getRange(row, 5).setBackground(infoColor).setHorizontalAlignment('right');
        }
    });
    
    // Columna G - Address Info Headers
    addressHeaders.forEach((header, index) => {
        const row = 29 + index;
        if (header) {
            sheet.getRange(row, 7).setValue(header)
                .setBackground('#bfdbfe')
                .setFontWeight('bold');
            // Información en columna H con gris intercalado
            const infoColor = (index % 2 === 0) ? '#f8f9fa' : 'white';
            sheet.getRange(row, 8).setBackground(infoColor).setHorizontalAlignment('right');
        }
    });
    
    // === SECCIÓN LAST ENROLLMENT ===
    sheet.getRange('A38:J38').merge();
    sheet.getRange('A38').setValue('📊 LAST ENROLLMENT')
        .setFontSize(14)
        .setFontWeight('bold');
    
    // Headers Last Enrollment
    const lastEnrollmentHeaders = ['Date', 'School', 'Grade', 'Status', 'Parent Name', 'Parent Phone', 'Parent Email', 'Notes'];
    lastEnrollmentHeaders.forEach((header, index) => {
        sheet.getRange(40, index + 1).setValue(header);
    });
    sheet.getRange('A40:H40')
        .setFontWeight('bold')
        .setBackground('#bfdbfe')
        .setHorizontalAlignment('center');
    
    // Filas de datos con gris intercalado
    for (let i = 41; i <= 45; i++) {
        const rowColor = (i % 2 === 1) ? '#f8f9fa' : 'white';
        sheet.getRange(i, 1, 1, 8).setBackground(rowColor);
        // Alineación derecha para información
        sheet.getRange(i, 1, 1, 8).setHorizontalAlignment('right');
    }
    
    // === ANCHOS DE COLUMNAS ===
    sheet.setColumnWidth(1, 150);
    sheet.setColumnWidth(2, 120);
    sheet.setColumnWidth(3, 100);
    sheet.setColumnWidth(4, 150);
    sheet.setColumnWidth(5, 120);
    sheet.setColumnWidth(6, 150);
    sheet.setColumnWidth(7, 150);
    sheet.setColumnWidth(8, 120);
    sheet.setColumnWidth(9, 100);
}
  
  function setupLogsTab(sheet) {
    sheet.clear();
    
    sheet.getRange('A1:F1').merge();
    sheet.getRange('A1').setValue('📝 SYSTEM LOGS').setFontSize(16).setFontWeight('bold').setHorizontalAlignment('center');
    
    const headers = ['Timestamp', 'User', 'Action', 'Student', 'Field Changed', 'Details'];
    headers.forEach((header, index) => {
      sheet.getRange(3, index + 1).setValue(header);
    });
    sheet.getRange('A3:F3').setFontWeight('bold').setBackground('#d1ecf1');
    
    sheet.setColumnWidth(1, 130);
    sheet.setColumnWidth(2, 100);
    sheet.setColumnWidth(3, 120);
    sheet.setColumnWidth(4, 120);
    sheet.setColumnWidth(5, 120);
    sheet.setColumnWidth(6, 200);
  }
  
  function onEdit(e) {
    const sheet = e.source.getActiveSheet();
    const range = e.range;
    const row = range.getRow();
    const col = range.getColumn();
    
    if (sheet.getName() === 'Enrollment Manager') {
      handleEnrollmentManagerEdit(range, row, col);
    } else if (sheet.getName() === 'Enrollment Updates') {
      handleEnrollmentUpdatesEdit(range, row, col);
    }
  }
  
  // ENHANCED: Updated event handler with new B5 dropdown functionality
  function handleEnrollmentManagerEdit(range, row, col) {
    if (range.getA1Notation() === 'B3') {
      const selectedSchool = range.getValue();
      updateSchoolInfo(selectedSchool);
      showLastEnrollments(selectedSchool); // Using consistent function name
      populateStudentDropdown(selectedSchool); // NEW: Populate student dropdown
    }
    
    // CHANGE: B5 now handles student selection instead of new enrollments
    if (range.getA1Notation() === 'B5') {
      const selectedStudent = range.getValue();
      if (selectedStudent && selectedStudent !== 'Loading students...' && selectedStudent !== 'No students available' && selectedStudent !== 'Select a student...') {
        showSelectedStudentInManager(selectedStudent); // NEW: Show selected student details
      } else {
        clearStudentDetails(); // Clear when no valid selection
      }
    }
    
    // CHANGE: Update range from 10-14 to 10-25
    if (row >= 10 && row <= 25 && col >= 1 && col <= 8) {
      const ss = SpreadsheetApp.getActiveSpreadsheet();
      const enrollmentManagerSheet = ss.getSheetByName('Enrollment Manager');
      if (!enrollmentManagerSheet) return;
      
      // Get the student name from column A of the clicked row
      const studentName = enrollmentManagerSheet.getRange(row, 1).getValue();
      if (studentName) {
        // Update B5 with the selected student
        enrollmentManagerSheet.getRange('B5').setValue(studentName);
        showSelectedStudentInManager(studentName);
      }
    }
    
    if (range.getA1Notation().includes('F3:G3') || range.getA1Notation() === 'F3') {
      createNewEnrollment();
    }
    
    if (range.getA1Notation().includes('I3:J3') || range.getA1Notation() === 'I3') {
      runReport();
    }
  }

  function handleEnrollmentUpdatesEdit(range, row, col) {
    if (range.getA1Notation() === 'B3') {
      const selectedSchool = range.getValue();
      clearSearchResults();
    }
    
    if (range.getA1Notation().includes('B5')) {
      const searchText = range.getValue();
      if (searchText && searchText.length > 1) {
        performSearch(searchText);
      }
    }
    
    // CHANGE: Update range from 10-14 to 10-25
    if (row >= 10 && row <= 25 && col >= 1 && col <= 6) {
      loadStudentForEdit(row);
    }
    
    if (range.getA1Notation().includes('A45:C45') || range.getA1Notation() === 'A45') {
      saveStudentChanges();
    }
  }
  
  // NEW: Function to populate student dropdown in B5
  function populateStudentDropdown(schoolName) {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const enrollmentManagerSheet = ss.getSheetByName('Enrollment Manager');
    
    if (!enrollmentManagerSheet || !schoolName || !SCHOOL_CONFIG[schoolName]) {
      if (enrollmentManagerSheet) {
        enrollmentManagerSheet.getRange('B5').setValue('No students available');
      }
      logAction('Error: Invalid school or sheet when populating student dropdown');
      return;
    }
    
    try {
      const config = SCHOOL_CONFIG[schoolName];
      const schoolSheet = ss.getSheetByName(config.dataSheet);
      
      if (!schoolSheet) {
        enrollmentManagerSheet.getRange('B5').setValue('School data not found');
        logAction(`Error: School sheet ${config.dataSheet} not found`);
        return;
      }
      
      const lastRow = schoolSheet.getLastRow();
      if (lastRow < 2) {
        enrollmentManagerSheet.getRange('B5').setValue('No students available');
        logAction('No data found in school sheet');
        return;
      }
      
      // Get accepted students for dropdown
      const data = schoolSheet.getRange(2, 1, lastRow - 1, schoolSheet.getLastColumn()).getValues();
      const studentList = [];
      
      data.forEach(row => {
        // Add validation for array access
        if (row.length <= config.columns.status) return;
        
        const status = row[config.columns.status] ? (row[config.columns.status] + '').toLowerCase() : '';
        
        // Validate array indices before access
        const studentFirst = row.length > config.columns.studentFirst ? (row[config.columns.studentFirst] || '') : '';
        const studentLast = row.length > config.columns.studentLast ? (row[config.columns.studentLast] || '') : '';
        
        if (config.acceptedStatuses.includes(status) && studentFirst && studentLast) {
          const fullName = `${studentFirst} ${studentLast}`.trim();
          if (!studentList.includes(fullName)) {
            studentList.push(fullName);
          }
        }
      });
      
      if (studentList.length > 0) {
        studentList.sort();
        const validation = SpreadsheetApp.newDataValidation()
          .requireValueInList(['Select a student...'].concat(studentList))
          .setAllowInvalid(false)
          .build();
        
        enrollmentManagerSheet.getRange('B5').setDataValidation(validation);
        enrollmentManagerSheet.getRange('B5').setValue('Select a student...');
        
        logAction(`Student dropdown populated for ${schoolName}. ${studentList.length} students available.`);
      } else {
        enrollmentManagerSheet.getRange('B5').clearDataValidations();
        enrollmentManagerSheet.getRange('B5').setValue('No accepted students found');
        logAction(`No accepted students found for ${schoolName}`);
      }
      
    } catch (error) {
      if (enrollmentManagerSheet) {
        enrollmentManagerSheet.getRange('B5').setValue('Error loading students');
      }
      logAction(`Error populating student dropdown for ${schoolName}: ${error.message}`);
    }
  }
  
  // ENHANCED: Function to show selected student details in manager
  function showSelectedStudentInManager(studentName) {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const enrollmentManagerSheet = ss.getSheetByName('Enrollment Manager');
    
    if (!enrollmentManagerSheet || !studentName || studentName === 'Select a student...') {
      logAction('Invalid parameters for showing student details');
      return;
    }
    
    // Clear previous highlights
    enrollmentManagerSheet.getRange('A10:H25').setBackground(null).setFontWeight('normal');
    
    // Highlight the selected student in the list
    const studentList = enrollmentManagerSheet.getRange('A10:H25').getValues();
    for (let i = 0; i < studentList.length; i++) {
      if (studentList[i][0] === studentName) {
        enrollmentManagerSheet.getRange(10 + i, 1, 1, 8).setBackground('#FFFDE7').setFontWeight('bold');
        break;
      }
    }
    
    const schoolName = enrollmentManagerSheet.getRange('B3').getValue();
    
    if (!schoolName || !SCHOOL_CONFIG[schoolName]) {
      logAction('Error: Invalid school selected when showing student details');
      return;
    }
    
    try {
      const config = SCHOOL_CONFIG[schoolName];
      const schoolSheet = ss.getSheetByName(config.dataSheet);
      
      if (!schoolSheet) {
        logAction(`Error: School sheet ${config.dataSheet} not found`);
        return;
      }
      
      const lastRow = schoolSheet.getLastRow();
      if (lastRow < 2) {
        logAction('No data found in school sheet');
        return;
      }
      
      // Find student data
      const data = schoolSheet.getRange(2, 1, lastRow - 1, schoolSheet.getLastColumn()).getValues();
      let studentData = null;
      
      for (let i = 0; i < data.length; i++) {
        // Validate array access
        if (data[i].length <= config.columns.studentFirst || data[i].length <= config.columns.studentLast) continue;
        
        const rowStudentFirst = data[i][config.columns.studentFirst] || '';
        const rowStudentLast = data[i][config.columns.studentLast] || '';
        const fullName = `${rowStudentFirst} ${rowStudentLast}`.trim();
        
        if (fullName === studentName) {
          studentData = data[i];
          break;
        }
      }
      
      if (!studentData) {
        logAction(`Student ${studentName} not found in ${schoolName} data`);
        return;
      }
      
      // Populate expanded Student Details section with validation
      // Student information (Column A)
      const studentFirst = studentData.length > config.columns.studentFirst ? (studentData[config.columns.studentFirst] || '') : '';
      const studentMiddle = studentData.length > config.columns.studentMiddle ? (studentData[config.columns.studentMiddle] || '') : '';
      const studentLast = studentData.length > config.columns.studentLast ? (studentData[config.columns.studentLast] || '') : '';
      const grade = studentData.length > config.columns.grade ? (studentData[config.columns.grade] || '') : '';
      const dateOfBirth = studentData.length > config.columns.dateOfBirth ? (studentData[config.columns.dateOfBirth] || '') : '';
      const gender = studentData.length > config.columns.gender ? (studentData[config.columns.gender] || '') : '';
      
      // Generate student ID
      const fullStudentName = `${studentFirst} ${studentMiddle} ${studentLast}`.replace(/\s+/g, ' ').trim();
      const studentId = generateStudentId(fullStudentName, schoolName);
      
      // Parent/Contact information (Column D)
      const parentFirst = studentData.length > config.columns.parentFirst ? (studentData[config.columns.parentFirst] || '') : '';
      const parentLast = studentData.length > config.columns.parentLast ? (studentData[config.columns.parentLast] || '') : '';
      const parentPhone = studentData.length > config.columns.parentPhone ? (studentData[config.columns.parentPhone] || '') : '';
      const email = studentData.length > config.columns.email ? (studentData[config.columns.email] || '') : '';
      const contact2 = studentData.length > config.columns.contact2 ? (studentData[config.columns.contact2] || '') : '';
      const familyType = studentData.length > config.columns.familyType ? (studentData[config.columns.familyType] || '') : '';
      const parish = studentData.length > config.columns.parish ? (studentData[config.columns.parish] || '') : '';
      
      // Address information (Column G)
      const street = studentData.length > config.columns.address.street ? (studentData[config.columns.address.street] || '') : '';
      const city = studentData.length > config.columns.address.city ? (studentData[config.columns.address.city] || '') : '';
      const state = studentData.length > config.columns.address.state ? (studentData[config.columns.address.state] || '') : '';
      const zip = studentData.length > config.columns.address.zip ? (studentData[config.columns.address.zip] || '') : '';
      
      // Religious affiliation (handle based on school configuration)
      let religiousAffiliation = '';
      if (config.hasReligiousAffiliation && studentData.length > config.columns.religiousAffiliation) {
        religiousAffiliation = studentData[config.columns.religiousAffiliation] || '';
      }
      
      // Populate the student details fields
      // Column A - Student Information
      enrollmentManagerSheet.getRange('B29').setValue(studentFirst);
      enrollmentManagerSheet.getRange('B30').setValue(studentMiddle);
      enrollmentManagerSheet.getRange('B31').setValue(studentLast);
      enrollmentManagerSheet.getRange('B32').setValue(grade);
      enrollmentManagerSheet.getRange('B33').setValue(dateOfBirth);
      enrollmentManagerSheet.getRange('B34').setValue(gender);
      enrollmentManagerSheet.getRange('B35').setValue(religiousAffiliation);
      enrollmentManagerSheet.getRange('B36').setValue(studentId);
      
      // Column D - Contact Information
      enrollmentManagerSheet.getRange('E29').setValue(parentFirst);
      enrollmentManagerSheet.getRange('E30').setValue(parentLast);
      enrollmentManagerSheet.getRange('E31').setValue(parentPhone);
      enrollmentManagerSheet.getRange('E32').setValue(email);
      enrollmentManagerSheet.getRange('E33').setValue(contact2);
      enrollmentManagerSheet.getRange('E34').setValue(familyType);
      enrollmentManagerSheet.getRange('E35').setValue(parish);
      
      // Column G - Address Information
      enrollmentManagerSheet.getRange('H29').setValue(street);
      enrollmentManagerSheet.getRange('H30').setValue(city);
      enrollmentManagerSheet.getRange('H31').setValue(state);
      enrollmentManagerSheet.getRange('H32').setValue(zip);
      
      // Update title to indicate viewing a specific student
      enrollmentManagerSheet.getRange('A7:J7').merge();
      enrollmentManagerSheet.getRange('A7').setValue(`📋 STUDENT DETAILS: ${studentName}`)
        .setFontSize(14).setFontWeight('bold');
      
      logAction(`Student details displayed for ${studentName} from ${schoolName}`);
      
    } catch (error) {
      logAction(`Error showing student details for ${studentName}: ${error.message}`);
    }
  }
  
  // Function to reset to last students view
  function resetToLastStudents() {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const enrollmentManagerSheet = ss.getSheetByName('Enrollment Manager');
    
    if (!enrollmentManagerSheet) {
      logAction('Error: Enrollment Manager sheet not found');
      return;
    }
    
    const schoolName = enrollmentManagerSheet.getRange('B3').getValue();
    
    if (schoolName && SCHOOL_CONFIG[schoolName]) {
      // Reset B5 to default
      enrollmentManagerSheet.getRange('B5').setValue('Select a student...');
      
      // Clear student details
      clearStudentDetails();
      
      // Update the title to reflect showing all accepted students
      enrollmentManagerSheet.getRange('A7:J7').merge();
      enrollmentManagerSheet.getRange('A7').setValue('📋 ALL ACCEPTED STUDENTS').setFontSize(14).setFontWeight('bold');
      
      // Refresh last students list
      showLastEnrollments(schoolName);
      
      logAction(`All students view restored for ${schoolName}`);
    } else {
      logAction('Error: Invalid school selected when resetting view');
    }
  }
  
  // ENHANCED: Updated function to clear student details with new range A29:I36
  function clearStudentDetails() {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const enrollmentManagerSheet = ss.getSheetByName('Enrollment Manager');
    
    if (!enrollmentManagerSheet) {
      logAction('Error: Enrollment Manager sheet not found');
      return;
    }
    
    // Clear only the student details area (preserving labels)
    enrollmentManagerSheet.getRange('B29:C36').clearContent();
    enrollmentManagerSheet.getRange('E29:F36').clearContent();
    enrollmentManagerSheet.getRange('H29:I36').clearContent();
    
    // Do not clear the student list in A10:H25
    
    logAction('Student details area cleared');
  }
  
  /**
   * Generates a student ID based on name and school
   * @param {string} studentName - The student's name
   * @param {string} schoolName - The school name
   * @return {string} Generated student ID
   */
  function generateStudentId(studentName, schoolName) {
    if (!studentName || !schoolName) return 'N/A';
    
    // Add validation for string operations
    const nameParts = (studentName || '').toString().trim().split(' ');
    const initials = nameParts.map(part => (part && part.length > 0) ? part.charAt(0).toUpperCase() : '').join('');
    const schoolCode = getSchoolCode(schoolName);
    const timestamp = new Date().getTime().toString().slice(-4);
    
    return `${schoolCode}-${initials}-${timestamp}`;
  }
  
  /**
   * Gets school code for student ID generation
   * @param {string} schoolName - The school name
   * @return {string} Two-letter school code
   */
  function getSchoolCode(schoolName) {
    if (!schoolName) return 'XX';
    
    const codes = {
      'Christ The King': 'CT',
      'Holy Family': 'HF',
      'Holy Trinity': 'HT',
      'St. Joseph': 'SJ'
    };
    return codes[schoolName] || 'XX';
  }
  
  /**
   * Logs actions to the Logs sheet
   * @param {string} action - The action performed
   * @param {string} details - Additional details
   */
  function logAction(action, details = '') {
    try {
      const ss = SpreadsheetApp.getActiveSpreadsheet();
      let logsSheet = ss.getSheetByName('Logs');
      
      if (!logsSheet) {
        logsSheet = ss.insertSheet('Logs');
        logsSheet.getRange('A1:D1').setValues([['Timestamp', 'Action', 'Details', 'User']]);
      }
      
      const timestamp = new Date();
      let user = 'System';
      
      // Add validation for Session access
      try {
        user = Session.getActiveUser().getEmail() || 'Unknown';
      } catch (e) {
        // Session not available, use default
      }
      
      logsSheet.appendRow([timestamp, action, details, user]);
    } catch (error) {
      console.error('Error logging action:', error);
    }
  }
  
  // Alias for showLast16Students to maintain naming consistency
  function showLast16Students(schoolName) {
    return showLastEnrollments(schoolName);
  }
  
  /**
 * Refreshes the dashboard data
 */
function refreshDashboard() {
    try {
      const ss = SpreadsheetApp.getActiveSpreadsheet();
      const enrollmentManagerSheet = ss.getSheetByName('Enrollment Manager');
      
      if (!enrollmentManagerSheet) {
        logAction('Error: Enrollment Manager sheet not found');
        return;
      }
      
      const currentSchool = enrollmentManagerSheet.getRange('B3').getValue();
      if (currentSchool && SCHOOL_CONFIG[currentSchool]) {
        updateSchoolInfo(currentSchool);
        showLastEnrollments(currentSchool); // Using consistent function name
        populateStudentDropdown(currentSchool);
      } else {
        logAction('Error: Invalid school selected when refreshing dashboard');
      }
    } catch (error) {
      logAction(`Error refreshing dashboard: ${error.message}`);
    }
  }
  
  /**
   * Exports report to CSV (manual process)
   */
  function exportReportToCSV() {
    const message = `Para exportar el reporte a CSV:\n\n` +
      `1. Ve a la hoja "Report Results"\n` +
      `2. Selecciona todos los datos (Ctrl+A)\n` +
      `3. Copia los datos (Ctrl+C)\n` +
      `4. Abre un nuevo documento de Google Sheets\n` +
      `5. Pega los datos (Ctrl+V)\n` +
      `6. Ve a Archivo > Descargar > Valores separados por comas (.csv)`;
    
    SpreadsheetApp.getUi().alert('Instrucciones de Exportación', message, SpreadsheetApp.getUi().ButtonSet.OK);
  }
  
  /**
   * Genera un ID de familia
   * @param {string} parentName - Nombre del padre/madre
   * @param {string} email - Dirección de correo electrónico
   * @return {string} ID de familia generado
   */
  function generateFamilyId(parentName, email) {
    if (!parentName && !email) return 'N/A';
    
    const name = parentName || email.split('@')[0];
    const nameParts = name.toString().trim().split(' ');
    const initials = nameParts.map(part => part.charAt(0).toUpperCase()).join('');
    const timestamp = new Date().getTime().toString().slice(-6);
    
    return `FAM-${initials}-${timestamp}`;
  }
  
  /**
   * Crea un archivo de plantilla para la escuela seleccionada
   * @param {string} schoolName - Nombre de la escuela
   */
  function createTemplateFile(schoolName) {
    try {
      const ss = SpreadsheetApp.getActiveSpreadsheet();
      const templateName = `${schoolName} - Enrollment Template - ${new Date().toISOString().split('T')[0]}`;
      
      // Copiar la hoja de cálculo actual
      const templateFile = ss.copy(templateName);
      
      SpreadsheetApp.getUi().alert(`Template created: ${templateName}\nFile ID: ${templateFile.getId()}`);
      
      logAction('Template Created', `School: ${schoolName}, File: ${templateName}`);
      
    } catch (error) {
      console.error('Error creating template:', error);
      SpreadsheetApp.getUi().alert('Error creating template: ' + error.message);
    }
  }
  
  /**
   * Verifica nuevas inscripciones y actualiza el dashboard
   */
  function checkNewEnrollments() {
    checkAllSchools();
    refreshDashboard();
  }
  
 
  
  /**
   * Limpia todos los registros
   */
  function clearAllLogs() {
    try {
      const ss = SpreadsheetApp.getActiveSpreadsheet();
      const logsSheet = ss.getSheetByName('Logs');
      
      if (!logsSheet) {
        SpreadsheetApp.getUi().alert('No se encontró la hoja de registros.');
        return;
      }
      
      const response = SpreadsheetApp.getUi().alert(
        'Limpiar Todos los Registros',
        '¿Estás seguro de que deseas limpiar todos los registros? Esta acción no se puede deshacer.',
        SpreadsheetApp.getUi().ButtonSet.YES_NO
      );
      
      if (response === SpreadsheetApp.getUi().Button.YES) {
        logsSheet.clear();
        logsSheet.getRange('A1:D1').setValues([['Timestamp', 'Action', 'Details', 'User']]);
        SpreadsheetApp.getUi().alert('Todos los registros han sido limpiados.');
        logAction('Logs Cleared', 'All previous logs were cleared');
      }
    } catch (error) {
      console.error('Error clearing logs:', error);
      SpreadsheetApp.getUi().alert('Error al limpiar registros: ' + error.message);
    }
  }
  
  /**
   * Valida la integridad de los datos en las hojas de escuelas
   * @param {string} schoolName - La escuela a validar
   * @return {Object} Resultados de la validación
   */
  function validateData(schoolName) {
    try {
      const schoolConfig = SCHOOL_CONFIG[schoolName];
      if (!schoolConfig) {
        return { valid: false, errors: ['Configuración de escuela no encontrada'] };
      }
      
      const ss = SpreadsheetApp.getActiveSpreadsheet();
      const schoolSheet = ss.getSheetByName(schoolConfig.sheetName);
      
      if (!schoolSheet) {
        return { valid: false, errors: ['Hoja de escuela no encontrada'] };
      }
      
      const data = schoolSheet.getDataRange().getValues();
      const errors = [];
      let validRows = 0;
      
      for (let i = 1; i < data.length; i++) {
        const row = data[i];
        const studentName = row[schoolConfig.columns.studentName - 1];
        const email = row[schoolConfig.columns.email - 1];
        
        if (!studentName || studentName.toString().trim() === '') {
          errors.push(`Fila ${i + 1}: Falta nombre del estudiante`);
        }
        
        if (!email || email.toString().trim() === '') {
          errors.push(`Fila ${i + 1}: Falta correo electrónico`);
        }
        
        if (studentName && email) {
          validRows++;
        }
      }
      
      return {
        valid: errors.length === 0,
        errors: errors,
        totalRows: data.length - 1,
        validRows: validRows
      };
      
    } catch (error) {
      console.error('Error validating data:', error);
      return { valid: false, errors: ['Error de validación: ' + error.message] };
    }
  }
  
  /**
   * Obtiene datos de la escuela con manejo de errores
   * @param {string} schoolName - Nombre de la escuela
   * @return {Array} Datos de la escuela o array vacío
   */
  function getSchoolData(schoolName) {
    try {
      const schoolConfig = SCHOOL_CONFIG[schoolName];
      if (!schoolConfig) return [];
      
      const ss = SpreadsheetApp.getActiveSpreadsheet();
      const schoolSheet = ss.getSheetByName(schoolConfig.sheetName);
      
      if (!schoolSheet) return [];
      
      return schoolSheet.getDataRange().getValues();
    } catch (error) {
      console.error('Error getting school data:', error);
      return [];
    }
  }


  function updateSchoolInfo(schoolName) {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const enrollmentManagerSheet = ss.getSheetByName('Enrollment Manager');
    
    if (!enrollmentManagerSheet || !schoolName || !SCHOOL_CONFIG[schoolName]) {
      if (enrollmentManagerSheet) {
        enrollmentManagerSheet.getRange('D5').setValue('0');
      }
      return;
    }
    
    try {
      const config = SCHOOL_CONFIG[schoolName];
      const schoolSheet = ss.getSheetByName(config.dataSheet);
      
      if (!schoolSheet) {
        enrollmentManagerSheet.getRange('D5').setValue('0');
        return;
      }
      
      const lastRow = schoolSheet.getLastRow();
      if (lastRow < 2) {
        enrollmentManagerSheet.getRange('D5').setValue('0');
        return;
      }
      
      // Contar nuevas inscripciones (isNew = TRUE/YES)
      const data = schoolSheet.getRange(2, 1, lastRow - 1, schoolSheet.getLastColumn()).getValues();
      let newEnrollmentCount = 0;
      
      data.forEach(row => {
        if (row.length <= config.columns.isNew) return;
        
        const isNew = row[config.columns.isNew];
        const status = row[config.columns.status] ? (row[config.columns.status] + '').toLowerCase() : '';
        
        // Contar solo estudiantes aceptados que son nuevas inscripciones
        if (config.acceptedStatuses.includes(status) && 
            (isNew === true || isNew === 'TRUE' || isNew === 'YES' || isNew === 'yes' || isNew === 'true')) {
          newEnrollmentCount++;
        }
      });
      
      // Actualizar el contador en D5
      enrollmentManagerSheet.getRange('D5').setValue(newEnrollmentCount);
      
      logAction(`School info updated for ${schoolName}. New enrollments: ${newEnrollmentCount}`);
      
    } catch (error) {
      enrollmentManagerSheet.getRange('D5').setValue('Error');
      logAction(`Error updating school info for ${schoolName}: ${error.message}`);
    }
    
  }
